Assignments for Week-02
####################################################################################################################################
1. Re-code the house price machine learning
课程回顾：
流程梳理：
1. 使用sklearn的数据集导入数据
2. 以提取平均房间数跟价格的关系作为分析的指标RM（average number of rooms per dwelling)
3. 使用matplotlib生成rm跟房价之间的对应关系。
4. 通过观察，可能跟线性函数比较类似，使用线性函数来拟合。使用随机的k，b值。
5. 计算出预测值跟真实值的差距，既是loss值。可以使用差值的平方求和除以个数来获得单个loss的平均值。
6. 根据定义的公式得到当前的loss值，带入已经获取的真实y，跟计算出来的y_hat
7. 使用不断的设定尝试次数的方法，将当前最小的loss给计算出来，在最小的时候，获得当前的k, b值
8. 如何让在较少的生成次数下，迅速得到比较接近的真实值，而不需要这么长的时间，使用梯度下降方式，首先设定k，b方向，进行监督优化。


步骤一： 导入数据
from sklearn.datasets import load_boston
data = load_boston()
x,y - data['data'],data['target']

第二，三步：画图，观察可能可以拟合的函数
import matplotlib.pyplot as plt
plt.scatter(x[:.5],y)

第四步：通过观察是一个线性关系
定义函数表示
def price(rm,k,b)
    return k * rm + b
   
如果能随机的生成k，b给定一个rm就能计算出他获得的价格，这个价格就是预测值
生成k， b 确保在一定范围波动
import random
k = random.random* 200 - 100
b = random.random* 200 - 100
x_rm = x[:,5]


对应的预期的价格为：
price_random_k_and_b =[price(rm,k,b) for rm in x_rm]

第五步：算出loss值
def loss(y, y_hat): 
    return sum((y_i - y_i_hat)**2 for y_i, y_i_hat in zip(list(y), list(y_hat))) / len(list(y))
    
第六步：带入y跟y_hat求得当前的loss值
current_loss =loss(y,price_random_k_and_b)

第七步： 经过不断的尝试，在一定次数范围内，找出最优化的loss对应下的k，b值，理论上来说，尝试的次数越多，那么越接近
trying_times= 10000
best_b,best_k = None,None
min_loss = float('inf')
for i in range(trying_times):
    k = random.random()*200 - 100
    b = random.random()*200 - 100
    price_ramdom_k_and_b = [price(rm,k,b) for rm in x_rm]
    current_loss= loss(y,price_ramdom_k_and_b)
    if current_loss< min_loss:
        min_loss = current_loss
        best_k,best_b = k, b
        print('when time is :{},get best_k is:{} and best_b is :{},and the loss is :{}'.format(i,best_k,best_b,min_loss)) 
        
第八步：采用方向约束，k可以正负，b可以正负,那么组合之后有4种可能，如果当前的这个loss一直在持续下降，那么就继续沿着当前的方向执行，否则，就随机的选择另外的方向进行
trying_times= 2000
min_loss = float('inf')

best_k = random.random()*200 - 100
best_b = random.random()*200 - 100

direction = [
    (+1,+1),
    (+1,-1),
    (-1,+1),
    (-1,-1),
]

current_direction = random.choice(direction)
scalar = 0.1

for i in range(trying_times):
    
    k_direction, b_direction = current_direction
    
    current_k,current_b = best_k+ scalar*k_direction , best_b + scalar*b_direction
    
    price_ramdom_k_and_b = [price(rm,current_k,current_b) for rm in x_rm]
    
    current_loss= loss(y,price_ramdom_k_and_b)
    
    if current_loss< min_loss:
        min_loss = current_loss
        best_k,best_b = current_k, current_b
        
        current_direction = current_direction
        print('when time is :{},get best_k is:{} and best_b is :{},and the loss is :{}'.format(i,best_k,best_b,min_loss))      
    else:
        current_direction =random.choice(direction)
        
        
    








a



1. Random Choose Method to get optimal k and b

2.Supervised Direction to get optimal k and b

3.Gradient Descent to get optimal k and b

4. Try different Loss function and learning rate.

For example, you can change the loss function: $Loss = \frac{1}{n} sum({y_i - \hat{y_i}})^2$ to $Loss = \frac{1}{n} sum(|{y_i - \hat{y_i}}|)$

And you can change the learning rate and observe the performance.

