Lesson-01 Assignment
1. 复现课堂代码部分：

adj_grammar = """
Adj* => null | Adj Adj*
Adj =>  蓝色的 | 好看的 | 小小的
""" 蓝色的 | 好看的 | 小小的
"""

# 以上部分是采用语言学家使用的语法规则，通过手动的方式编译出来的一套语法。按照词性进行划分的。目的是根据这样的内容，生成一句话如何来做？
# 第一步：在单一的词性中，如果随机选择一个词他是 adj (只能选择一个词，没法扩展的，叫终结词terminal）
import random
def adj():
    return random.choice("蓝色的 | 好看的 | 小小的".split('|')).split()[0]
 
adj()
>>>蓝色的
>>>好看的
>>>小小的
...

# 第二步：在单一的词性中，如果随机选择一个词他是 adj*，表示这样的词语叫做非终结词语，可以扩展，一般会出现在等号的左边（虽然再一句话中看到的再右边，但是再左边是可以找到的。（类似于递归调用）
def adj_star():
    return random.choice([lambda:'', lambda: adj() + adj_star()])()
    
adj_star()
>>>蓝色的蓝色的
>>>好看的蓝色的
>>>小小的蓝色的好看的
>>>小小的小小的小小的
>>>小小的
...   


综上，一般地：
adj_grammar = """
Adj* => null | Adj Adj*
Adj =>  蓝色的 | 好看的 | 小小的
"""

# 可以将以上部分转化成字典的数据结构。
grammar = {}
for line in adj_grammar.split('\n'):
    if not line.strip():
        countinue;
    a,b = line.split('=>')
    grammar[a.strip()] = [s for s.split() in b.split('|')]   

grammar
>>>{'Adj*': [['null'], ['Adj', 'Adj*']], 'Adj': [['蓝色的'], ['好看的'], ['小小的']]}
grammar[Adj]
>>> [['蓝色的'], ['好看的'], ['小小的']]
grammar[Adj*]
>>>[['null'], ['Adj', 'Adj*']]


#推广来说：对于：给定的一段具有表示含义的字符串，输入的是该字符串，输出的是需要具备含有字典数据结构的语法结构，方便后面使用
类似于：
simple_grammar = """
sentence => noun_phrase verb_phrase
noun_phrase => Article Adj* noun
Adj* => null | Adj Adj*
verb_phrase => verb noun_phrase
Article =>  一个 | 这个
noun =>   女人 |  篮球 | 桌子 | 小猫
verb => 看着   |  坐在 |  听着 | 看见
Adj =>  蓝色的 | 好看的 | 小小的
"""

使用：
def grammar(grammar_str)
    grammar = {}
    for line in adj_grammar.split('\n'):
        if not line.strip():
            countinue;
        a,b = line.split('=>')
        grammar[a.strip()] = [s for s.split() in b.split('|')]
    return grammar
    
example_grammar = grammar(simple_grammar)
example_grammar
>>>{'sentence': [['noun_phrase', 'verb_phrase']],
 'noun_phrase': [['Article', 'Adj*', 'noun']],
 'Adj*': [['null'], ['Adj', 'Adj*']],
 'verb_phrase': [['verb', 'noun_phrase']],
 'Article': [['一个'], ['这个']],
 'noun': [['女人'], ['篮球'], ['桌子'], ['小猫']],
 'verb': [['看着'], ['坐在'], ['听着'], ['看见']],
 'Adj': [['蓝色的'], ['好看的'], ['小小的']]}


综上：根据字符串===》》》产生了具有字典形式的数据结构，
#问题在于：如果将不同词性的组装起来，并且建立一套规则，理想情况下，输入一个该字典形式的数据结构grammar， 输出的就是他随机产生的一个句子，如何做？

{'sentence': [['noun_phrase', 'verb_phrase']],
 'noun_phrase': [['Article', 'Adj*', 'noun']],
 'Adj*': [['null'], ['Adj', 'Adj*']],
 'verb_phrase': [['verb', 'noun_phrase']],
 'Article': [['一个'], ['这个']],
 'noun': [['女人'], ['篮球'], ['桌子'], ['小猫']],
 'verb': [['看着'], ['坐在'], ['听着'], ['看见']],
 'Adj': [['蓝色的'], ['好看的'], ['小小的']]}
 
 
 




































